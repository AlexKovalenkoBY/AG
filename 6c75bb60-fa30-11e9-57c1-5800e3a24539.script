var g_nLoc = Context.getSelectedLanguage();

main();

function main(){
    //Ножно построить иерархию объектов. Смотрите класс внизу
    var hierarchi_class  = init_hierarchi_class();
    
    var selected_models = ArisData.getSelectedModels();
    var File = Context.createOutputObject();
    
    var selected_model = selected_models[0];
    
    selected_model.BuildGraph(true);
    // стандартно берем нашы стартовые объекты  
    var StartNodes = selected_model.StartNodeList().filter(function(StartObjOcc){ return StartObjOcc.SymbolNum() == Constants.ST_APPL_SYS_CLS});
    
    var hierarchi_class_objs = []; // поскольку на моделе старровых объектов может быть несколько то деклалииуем масив 
    
    StartNodes.forEach(function(StartObjOcc){
        
        selected_model.MarkVisited(StartObjOcc, true);
        // создаем наш объект
        var hierarchi_class_obj = new hierarchi_class(StartObjOcc, selected_model, 1);
        // ищем чайлды
        hierarchi_class_obj.getChilds();
        // вставляем в наш масив стартовых объектов
        hierarchi_class_objs.push(hierarchi_class_obj);
        
    });
  
    // выводим наш масив стартовых объектов
    OutTable(File, hierarchi_class_objs);
    
    File.WriteReport();
}
function OutTable(File, hierarchi_class_objs){
   // ищем максимальный левел - тоесть количество колонок которые у нас могуд быть
   var maxLevel = Math.max.apply(null, hierarchi_class_objs.map(function (item) {return item.getMaxLevel();}))
  
   File.BeginSection(210, 297, 10, 10, 30, 30, 30, 30, false, Constants.SECTION_DEFAULT); 
 
   
   
  
   
   File.OutputLn("Table","Arial",18,Constants.C_BLACK,Constants.C_WHITE,Constants.FMT_BOLD | Constants.FMT_CENTER| Constants.FMT_TOCENTRY0,0);
   
    var colWidthList = new java.util.ArrayList();
    // поскольку maxLevel равно количеству колонок то добавляес столько же колонок
   for(var i=0;i<maxLevel;i++){
    colWidthList.add(100/maxLevel);   // устанавливаем везде равную шырину колонок. ТОесть если 4 колонки то будет 25, если 3 - то 33.3
   }
   
   File.BeginTable(100, colWidthList, Constants.C_BLACK,Constants.C_WHITE,Constants.FMT_LEFT | Constants.FMT_ITALIC,0); 
   File.TableRow();
   // рекурсивно выводим нашы объекты
   outHierarchyObjects(File, hierarchi_class_objs, maxLevel);
   
   
   
   
   File.EndTable("",100, "Arial",10,Constants.C_BLACK,Constants.C_BLACK,0,Constants.FMT_LEFT | Constants.FMT_ITALIC,0);
   
   File.EndSection();
}

function outHierarchyObjects(File, hierarchi_class_objs, maxLevel){
    // для каждого объекта в полученом масиве
     hierarchi_class_objs.forEach(function(h_obj, index){
         // если не первый чайлд то стартует новыи Row
         if(index>0){
          File.TableRow();
         }
         // ищем сколько у нас потом будет чайлдов на самом нижнем уровне, чтобы знать скольго строк обэединять
         var rows_concat = h_obj.getAllChildsQty();
         // по умолчанию на объединяем колонки
         var cols_concat = 1;
         if(h_obj.childs.length==0){
             // но если мы на последнем уровне, то проверяем на том же мы уровне что максимальный или нет
             if(h_obj.level!=maxLevel){
                 // если нет то объединяем колонки. например максимальний уровень 4 а мы на 3. тогды 4-3+1=2. Тоесть объелиняем 2 колонки вконце даной строки
                 cols_concat =  maxLevel - h_obj.level + 1;
             }
         }
         
          File.TableCell(h_obj.objOcc.ObjDef().Name(g_nLoc), rows_concat, cols_concat,"Arial",10,Constants.C_BLACK,Constants.C_WHITE,0,Constants.FMT_LEFT,0);
           // рекурсивно ту же функцию для всех чайлдов
          outHierarchyObjects(File, h_obj.childs, maxLevel);
      });
}


function init_hierarchi_class(){
 
   
   // Used to store information about current object, and his childs    
   //параметр model используется для коректной работы model
   // level - 
    var hierarchi_obj_class = function(aris_occ_object, model, level){
           this.objOcc = aris_occ_object;
           this.level = level; // number to store level 
           this.model = model;
           this.childs = []; 
       }
   
  
   //proto is short for prototype
   var proto =   hierarchi_obj_class.prototype;
   //метод получает Childs для текущего объекта
   //примерно то же самое что мы делали при выводе справочника, но Childs тут будут не АРИС объекты, а нашы hierarchi_obj_class
   //тоесть каждый из наших объектов будет иметь в себе еще масив hierarchi_obj_class для чайлдов
   proto.getChilds = function(){
      var childs = [];
      
      var currenthierarchi_obj = this;
      
       var connectedObjOccs = this.objOcc.getConnectedObjOccs([Constants.ST_APPL_SYS_CLS, Constants.ST_APPL_SYS_TYPE, Constants.ST_MOD_TYPE],Constants.EDGES_INOUT)
        .filter(function(connectedObjOcc){ return !currenthierarchi_obj.model.GetVisited(connectedObjOcc)});
        
        
        connectedObjOccs.forEach(function(connectedObjOcc, index){
            currenthierarchi_obj.model.MarkVisited(connectedObjOcc, true);
            //создаем наш обект
            var new_hierarchy_obj = new hierarchi_obj_class(connectedObjOcc, currenthierarchi_obj.model, currenthierarchi_obj.level+1);  
            new_hierarchy_obj.getChilds();
            //и записываем его в childs
            childs.push(new_hierarchy_obj);
        });
         //проверка на детализирующую модель
        var AssignedModelsList = this.objOcc.ObjDef().AssignedModels(21).filter(function(model){return model.GUID()!=currenthierarchi_obj.objOcc.Model().GUID()});
        if(AssignedModelsList.length>0){
          var AssignedModel = AssignedModelsList[0];
          AssignedModel.BuildGraph(true);
          var CurrObjListInModel = this.objOcc.ObjDef().OccListInModel(AssignedModel);
          CurrObjListInModel.forEach(function(Start_Object){
              AssignedModel.MarkVisited(Start_Object, true);
               //создаем наш обект
              var new_hierarchy_obj = new hierarchi_obj_class(Start_Object, AssignedModel, currenthierarchi_obj.level);  
              new_hierarchy_obj.getChilds();
              //и записываем его в childs
              childs = childs.concat(new_hierarchy_obj.childs);
          });
        }
    
        this.childs = childs;
   }
   //метод сумирует количество Childs на самом нижнем уровне
    proto.getAllChildsQty = function(){
        if(this.childs.length>0){
          var totalsumm = 0;
          //если есть чайлды, значит рекурсивно вызываем ту же функцию для каждого чайлда и  суммироет результат
          this.childs.forEach(function (item) {totalsumm=totalsumm+item.getAllChildsQty()});
          return totalsumm;
        }
        //если нет чайлдов, значит ето и есть самый нижний цровень. тоесть возвращаем по нему 1
        return 1;
   }
   //метод ищет максимальный уровень по всем childs
   proto.getMaxLevel = function(){
    if(this.childs.length>0){
        //метод Math.max.apply(null, [1,4,2,5,7,3,1,3,5,8,9]) ето все равно что Math.max(1,4,2,5,7,3,1,3,5,8,9)
        //мы не можем напрямую передать масив в функцию Math.max. (Math.max(new Array(1,4,2,5,7,3,1,3,5,8,9)) - вызывать нельзя)
        //поетому используем apply(null, [1,4,2,5,7,3,1,3,5,8,9])
        //null - ето параметр для передачи this. this нам тут не нужен. Поетому null
      return Math.max.apply(null, 
      this.childs.map(//преобразуем наш масив обїектов в масив чисел
                      function (item) {
                         //рекурсикно запускаем ето же функцию для чажного чайлда 
                        return item.getMaxLevel();
                      }
      ));
    }
    return this.level;
   }
   return hierarchi_obj_class;
}

