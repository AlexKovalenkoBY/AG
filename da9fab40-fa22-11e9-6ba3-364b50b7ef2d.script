var g_Nloc = Context.getSelectedLanguage();

main();
function main(){
    
    var xml_file = Context.createXMLOutputObject("xml_expot.xml","Root");
    var selected_obj = ArisData.getSelectedObjOccs(); //выбранный объект из контекста (может быть несколько) 
    
var func_list=[]; //массив функций для сценария


  if (selected_obj[0].SymbolNum()==Constants.ST_SCENARIO) { var  func_list  = selected_obj[0].getConnectedObjOccs([72,335]) } //если выбран сценарий, то в работу идут все привязанные к нему функции
    else 
        { var func_list = selected_obj} //если выбран н
    
var    ProcessNode = xml_file.addElement(xml_file.getRootElement(), "Process");
var    ModelsNode = xml_file.addElement(ProcessNode, "Models");
var    ModelNode = xml_file.addElement(ModelsNode, "Model");
var    ObjNode = xml_file.addElement(ModelNode, "ObjOcc");
var InConnNode =  xml_file.addElement(ObjNode, "InConnections");
var OutConnNode =  xml_file.addElement(ObjNode, "OutConnections");
        
        ProcessNode.setAttribute("Name", selected_obj[0].ObjDef().Name(g_Nloc));

    var obj_name=selected_obj[0].ObjDef().Name(g_Nloc);
ObjNode.setAttribute("Name", obj_name);
ObjNode.setAttribute("Type", selected_obj[0].ObjDef().Type());

ObjNode.setAttribute("Symbol", selected_obj[0].SymbolName());
ObjNode.setAttribute("ID", selected_obj[0].ObjDef().GUID());


ObjNode.setAttribute("Name1", obj_name);
ObjNode.setAttribute("Type1", selected_obj[0].ObjDef().Type());

ObjNode.setAttribute("Symbol1", selected_obj[0].SymbolName());
ObjNode.setAttribute("ID1", selected_obj[0].ObjDef().GUID());

    var attrmap = selected_obj[0].ObjDef().AttrMap(g_Nloc);

 

    xml_file.WriteReport();
}
function write2Xml(xmlOutput, xmlParent, oOcc, sElement) {
    var xmlItem = xmlOutput.addElement(xmlParent, sElement);
    xmlItem.setAttribute("Name", oOcc.ObjDef().Name(g_Nloc));
    xmlItem.setAttribute("Type", oOcc.ObjDef().TypeNum());
    xmlItem.setAttribute("Symbol", oOcc.SymbolName());
    xmlItem.setAttribute("ID", oOcc.ObjDef().GUID());
    return xmlItem;
}

function writeXmlCxnIn(xmlOutput, xmlParent, oCxn, sElement) {
for (var i=0;i<oCxn.length; i++) {
    var xmlCxn = xmlOutput.addElement(xmlParent, sElement);

    xmlCxn.setAttribute("SourceName", oCxn[i].SourceObjOcc().ObjDef().Name(g_Nloc));
    xmlCxn.setAttribute("SourceType", oCxn[i].SourceObjOcc().ObjDef().Type());
    xmlCxn.setAttribute("SourceGUID", oCxn[i].SourceObjOcc().ObjDef().GUID());
    
}
 //   return xmlCxn;
}

function writeXmlCxnOut(xmlOutput, xmlParent, oCxn, sElement) {
for (var i=0;i<oCxn.length; i++) {
    var xmlCxn = xmlOutput.addElement(xmlParent, sElement);
    xmlCxn.setAttribute("TargetName", oCxn[i].TargetObjOcc().ObjDef().Name(g_Nloc));    
    xmlCxn.setAttribute("TargetType", oCxn[i].TargetObjOcc().ObjDef().Type());
    xmlCxn.setAttribute("TargetGUID", oCxn[i].TargetObjOcc().ObjDef().GUID());
   // return xmlCxn;
}
}
